<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="com.upgrad.quora.api.controller.AnswerControllerTest" time="27.468" tests="14" errors="0" skipped="0" failures="14">
  <properties>
    <property name="sun.desktop" value="windows"/>
    <property name="awt.toolkit" value="sun.awt.windows.WToolkit"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\test-classes;C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.0.1.RELEASE\spring-boot-starter-web-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter\2.0.1.RELEASE\spring-boot-starter-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot\2.0.1.RELEASE\spring-boot-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.0.1.RELEASE\spring-boot-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.0.1.RELEASE\spring-boot-starter-logging-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.10.0\log4j-to-slf4j-2.10.0.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\logging\log4j\log4j-api\2.10.0\log4j-api-2.10.0.jar;C:\Users\Shubham Kumar\.m2\repository\org\slf4j\jul-to-slf4j\1.7.25\jul-to-slf4j-1.7.25.jar;C:\Users\Shubham Kumar\.m2\repository\javax\annotation\javax.annotation-api\1.3.2\javax.annotation-api-1.3.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-json\2.0.1.RELEASE\spring-boot-starter-json-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.5\jackson-databind-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.5\jackson-core-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.9.5\jackson-datatype-jdk8-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.9.5\jackson-datatype-jsr310-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.9.5\jackson-module-parameter-names-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\2.0.1.RELEASE\spring-boot-starter-tomcat-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\8.5.29\tomcat-embed-core-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\8.5.29\tomcat-embed-el-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.5.29\tomcat-embed-websocket-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\validator\hibernate-validator\6.0.9.Final\hibernate-validator-6.0.9.Final.jar;C:\Users\Shubham Kumar\.m2\repository\javax\validation\validation-api\2.0.1.Final\validation-api-2.0.1.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-webmvc\5.0.5.RELEASE\spring-webmvc-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\io\swagger\swagger-annotations\1.5.18\swagger-annotations-1.5.18.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger2\2.6.1\springfox-swagger2-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\swagger\swagger-models\1.5.10\swagger-models-1.5.10.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-spi\2.6.1\springfox-spi-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-core\2.6.1\springfox-core-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-schema\2.6.1\springfox-schema-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger-common\2.6.1\springfox-swagger-common-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-spring-web\2.6.1\springfox-spring-web-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\com\google\guava\guava\18.0\guava-18.0.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\Shubham Kumar\.m2\repository\org\slf4j\slf4j-api\1.7.25\slf4j-api-1.7.25.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\plugin\spring-plugin-core\1.2.0.RELEASE\spring-plugin-core-1.2.0.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\plugin\spring-plugin-metadata\1.2.0.RELEASE\spring-plugin-metadata-1.2.0.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\mapstruct\mapstruct\1.0.0.Final\mapstruct-1.0.0.Final.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger-ui\2.6.1\springfox-swagger-ui-2.6.1.jar;C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-service\target\quora-service-1.0-SNAPSHOT.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-validation\2.0.1.RELEASE\spring-boot-starter-validation-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\2.0.1.RELEASE\spring-boot-starter-data-jpa-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-aop\2.0.1.RELEASE\spring-boot-starter-aop-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\aspectj\aspectjweaver\1.8.13\aspectjweaver-1.8.13.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.0.1.RELEASE\spring-boot-starter-jdbc-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\zaxxer\HikariCP\2.7.8\HikariCP-2.7.8.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-jdbc\5.0.5.RELEASE\spring-jdbc-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Shubham Kumar\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Shubham Kumar\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Shubham Kumar\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Shubham Kumar\.m2\repository\javax\transaction\javax.transaction-api\1.2\javax.transaction-api-1.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\data\spring-data-jpa\2.0.6.RELEASE\spring-data-jpa-2.0.6.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\data\spring-data-commons\2.0.6.RELEASE\spring-data-commons-2.0.6.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-orm\5.0.5.RELEASE\spring-orm-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-tx\5.0.5.RELEASE\spring-tx-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-aspects\5.0.5.RELEASE\spring-aspects-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\commons\commons-lang3\3.7\commons-lang3-3.7.jar;C:\Users\Shubham Kumar\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\Shubham Kumar\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\Shubham Kumar\.m2\repository\com\auth0\java-jwt\3.4.0\java-jwt-3.4.0.jar;C:\Users\Shubham Kumar\.m2\repository\commons-codec\commons-codec\1.11\commons-codec-1.11.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-test\2.0.1.RELEASE\spring-boot-starter-test-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-test\2.0.1.RELEASE\spring-boot-test-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\2.0.1.RELEASE\spring-boot-test-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar;C:\Users\Shubham Kumar\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar;C:\Users\Shubham Kumar\.m2\repository\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar;C:\Users\Shubham Kumar\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\Shubham Kumar\.m2\repository\org\assertj\assertj-core\3.9.1\assertj-core-3.9.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\mockito\mockito-core\2.15.0\mockito-core-2.15.0.jar;C:\Users\Shubham Kumar\.m2\repository\net\bytebuddy\byte-buddy\1.7.11\byte-buddy-1.7.11.jar;C:\Users\Shubham Kumar\.m2\repository\net\bytebuddy\byte-buddy-agent\1.7.11\byte-buddy-agent-1.7.11.jar;C:\Users\Shubham Kumar\.m2\repository\org\objenesis\objenesis\2.6\objenesis-2.6.jar;C:\Users\Shubham Kumar\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\Shubham Kumar\.m2\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;C:\Users\Shubham Kumar\.m2\repository\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\Shubham Kumar\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-core\5.0.5.RELEASE\spring-core-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-jcl\5.0.5.RELEASE\spring-jcl-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-test\5.0.5.RELEASE\spring-test-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\xmlunit\xmlunit-core\2.5.1\xmlunit-core-2.5.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-web\5.0.8.RELEASE\spring-web-5.0.8.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-beans\5.0.5.RELEASE\spring-beans-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.6\jackson-annotations-2.9.6.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-context\5.0.8.RELEASE\spring-context-5.0.8.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-aop\5.0.5.RELEASE\spring-aop-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-expression\5.0.5.RELEASE\spring-expression-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\postgresql\postgresql\42.2.2\postgresql-42.2.2.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="user.timezone" value=""/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="os.name" value="Windows 10"/>
    <property name="user.country" value="IN"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk1.8.0_271\jre\bin"/>
    <property name="sun.java.command" value="C:\Users\SHUBHA~1\AppData\Local\Temp\surefire300718036913513775\surefirebooter5637334560389609281.jar C:\Users\Shubham Kumar\AppData\Local\Temp\surefire300718036913513775 2020-12-02T15-18-03_132-jvmRun1 surefire3045173883509485074tmp surefire_09212742268587425037tmp"/>
    <property name="surefire.test.class.path" value="C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\test-classes;C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.0.1.RELEASE\spring-boot-starter-web-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter\2.0.1.RELEASE\spring-boot-starter-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot\2.0.1.RELEASE\spring-boot-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.0.1.RELEASE\spring-boot-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.0.1.RELEASE\spring-boot-starter-logging-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.10.0\log4j-to-slf4j-2.10.0.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\logging\log4j\log4j-api\2.10.0\log4j-api-2.10.0.jar;C:\Users\Shubham Kumar\.m2\repository\org\slf4j\jul-to-slf4j\1.7.25\jul-to-slf4j-1.7.25.jar;C:\Users\Shubham Kumar\.m2\repository\javax\annotation\javax.annotation-api\1.3.2\javax.annotation-api-1.3.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-json\2.0.1.RELEASE\spring-boot-starter-json-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.5\jackson-databind-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.5\jackson-core-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.9.5\jackson-datatype-jdk8-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.9.5\jackson-datatype-jsr310-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.9.5\jackson-module-parameter-names-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\2.0.1.RELEASE\spring-boot-starter-tomcat-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\8.5.29\tomcat-embed-core-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\8.5.29\tomcat-embed-el-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.5.29\tomcat-embed-websocket-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\validator\hibernate-validator\6.0.9.Final\hibernate-validator-6.0.9.Final.jar;C:\Users\Shubham Kumar\.m2\repository\javax\validation\validation-api\2.0.1.Final\validation-api-2.0.1.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-webmvc\5.0.5.RELEASE\spring-webmvc-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\io\swagger\swagger-annotations\1.5.18\swagger-annotations-1.5.18.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger2\2.6.1\springfox-swagger2-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\swagger\swagger-models\1.5.10\swagger-models-1.5.10.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-spi\2.6.1\springfox-spi-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-core\2.6.1\springfox-core-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-schema\2.6.1\springfox-schema-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger-common\2.6.1\springfox-swagger-common-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-spring-web\2.6.1\springfox-spring-web-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\com\google\guava\guava\18.0\guava-18.0.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\Shubham Kumar\.m2\repository\org\slf4j\slf4j-api\1.7.25\slf4j-api-1.7.25.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\plugin\spring-plugin-core\1.2.0.RELEASE\spring-plugin-core-1.2.0.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\plugin\spring-plugin-metadata\1.2.0.RELEASE\spring-plugin-metadata-1.2.0.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\mapstruct\mapstruct\1.0.0.Final\mapstruct-1.0.0.Final.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger-ui\2.6.1\springfox-swagger-ui-2.6.1.jar;C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-service\target\quora-service-1.0-SNAPSHOT.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-validation\2.0.1.RELEASE\spring-boot-starter-validation-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\2.0.1.RELEASE\spring-boot-starter-data-jpa-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-aop\2.0.1.RELEASE\spring-boot-starter-aop-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\aspectj\aspectjweaver\1.8.13\aspectjweaver-1.8.13.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.0.1.RELEASE\spring-boot-starter-jdbc-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\zaxxer\HikariCP\2.7.8\HikariCP-2.7.8.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-jdbc\5.0.5.RELEASE\spring-jdbc-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Shubham Kumar\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Shubham Kumar\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Shubham Kumar\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Shubham Kumar\.m2\repository\javax\transaction\javax.transaction-api\1.2\javax.transaction-api-1.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\data\spring-data-jpa\2.0.6.RELEASE\spring-data-jpa-2.0.6.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\data\spring-data-commons\2.0.6.RELEASE\spring-data-commons-2.0.6.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-orm\5.0.5.RELEASE\spring-orm-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-tx\5.0.5.RELEASE\spring-tx-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-aspects\5.0.5.RELEASE\spring-aspects-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\commons\commons-lang3\3.7\commons-lang3-3.7.jar;C:\Users\Shubham Kumar\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\Shubham Kumar\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\Shubham Kumar\.m2\repository\com\auth0\java-jwt\3.4.0\java-jwt-3.4.0.jar;C:\Users\Shubham Kumar\.m2\repository\commons-codec\commons-codec\1.11\commons-codec-1.11.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-test\2.0.1.RELEASE\spring-boot-starter-test-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-test\2.0.1.RELEASE\spring-boot-test-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\2.0.1.RELEASE\spring-boot-test-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar;C:\Users\Shubham Kumar\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar;C:\Users\Shubham Kumar\.m2\repository\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar;C:\Users\Shubham Kumar\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\Shubham Kumar\.m2\repository\org\assertj\assertj-core\3.9.1\assertj-core-3.9.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\mockito\mockito-core\2.15.0\mockito-core-2.15.0.jar;C:\Users\Shubham Kumar\.m2\repository\net\bytebuddy\byte-buddy\1.7.11\byte-buddy-1.7.11.jar;C:\Users\Shubham Kumar\.m2\repository\net\bytebuddy\byte-buddy-agent\1.7.11\byte-buddy-agent-1.7.11.jar;C:\Users\Shubham Kumar\.m2\repository\org\objenesis\objenesis\2.6\objenesis-2.6.jar;C:\Users\Shubham Kumar\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\Shubham Kumar\.m2\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;C:\Users\Shubham Kumar\.m2\repository\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\Shubham Kumar\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-core\5.0.5.RELEASE\spring-core-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-jcl\5.0.5.RELEASE\spring-jcl-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-test\5.0.5.RELEASE\spring-test-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\xmlunit\xmlunit-core\2.5.1\xmlunit-core-2.5.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-web\5.0.8.RELEASE\spring-web-5.0.8.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-beans\5.0.5.RELEASE\spring-beans-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.6\jackson-annotations-2.9.6.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-context\5.0.8.RELEASE\spring-context-5.0.8.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-aop\5.0.5.RELEASE\spring-aop-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-expression\5.0.5.RELEASE\spring-expression-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\postgresql\postgresql\42.2.2\postgresql-42.2.2.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\Shubham Kumar"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.home" value="C:\Program Files\Java\jdk1.8.0_271\jre"/>
    <property name="basedir" value="C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api"/>
    <property name="file.separator" value="\"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.awt.graphicsenv" value="sun.awt.Win32GraphicsEnvironment"/>
    <property name="surefire.real.class.path" value="C:\Users\SHUBHA~1\AppData\Local\Temp\surefire300718036913513775\surefirebooter5637334560389609281.jar"/>
    <property name="sun.boot.class.path" value="C:\Program Files\Java\jdk1.8.0_271\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_271\jre\classes"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="1.8.0_271-b09"/>
    <property name="user.name" value="Shubham Kumar"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.endorsed.dirs" value="C:\Program Files\Java\jdk1.8.0_271\jre\lib\endorsed"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\Shubham Kumar\.m2\repository"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\SHUBHA~1\AppData\Local\Temp\"/>
    <property name="java.version" value="1.8.0_271"/>
    <property name="user.dir" value="C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="java.awt.printerjob" value="sun.awt.windows.WPrinterJob"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk1.8.0_271\jre\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\oraclexe\app\oracle\product\11.2.0\server\bin;S:\app\dekumark\product\18.0.0\client_1;S:\app\dekumark\product\18.0.0\client_1\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Java\jdk1.8.0_271\bin;C:\Program Files\Git\cmd;C:\Program Files\MongoDB\Server\4.4\bin;C:\Users\Shubham Kumar\Desktop\apache-maven-3.6.3\bin;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\Shubham Kumar\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Java\jdk1.8.0_271\bin;C:\Program Files\JetBrains\IntelliJ IDEA 2019.3.3\bin;;C:\Users\Shubham Kumar\AppData\Local\Programs\Microsoft VS Code\bin;;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.2.3\bin;;."/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="25.271-b09"/>
    <property name="java.ext.dirs" value="C:\Program Files\Java\jdk1.8.0_271\jre\lib\ext;C:\WINDOWS\Sun\Java\lib\ext"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="52.0"/>
  </properties>
  <testcase name="deleteAnswerWithNonExistingAccessToken" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.125">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.deleteAnswerWithNonExistingAccessToken(AnswerControllerTest.java:87)
]]></failure>
    <system-out><![CDATA[15:18:20.420 [main] DEBUG org.springframework.test.context.junit4.SpringJUnit4ClassRunner - SpringJUnit4ClassRunner constructor called with [class com.upgrad.quora.api.controller.AnswerControllerTest]
15:18:20.434 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
15:18:20.477 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
15:18:20.568 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [com.upgrad.quora.api.controller.AnswerControllerTest] from class [org.springframework.boot.test.context.SpringBootTestContextBootstrapper]
15:18:20.627 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.upgrad.quora.api.controller.AnswerControllerTest], using SpringBootContextLoader
15:18:20.636 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.upgrad.quora.api.controller.AnswerControllerTest]: class path resource [com/upgrad/quora/api/controller/AnswerControllerTest-context.xml] does not exist
15:18:20.637 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.upgrad.quora.api.controller.AnswerControllerTest]: class path resource [com/upgrad/quora/api/controller/AnswerControllerTestContext.groovy] does not exist
15:18:20.637 [main] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.upgrad.quora.api.controller.AnswerControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
15:18:20.639 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.upgrad.quora.api.controller.AnswerControllerTest]: AnswerControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
15:18:20.809 [main] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.upgrad.quora.api.controller.AnswerControllerTest]
15:18:20.823 [main] DEBUG org.springframework.core.env.StandardEnvironment - Adding PropertySource 'systemProperties' with lowest search precedence
15:18:20.824 [main] DEBUG org.springframework.core.env.StandardEnvironment - Adding PropertySource 'systemEnvironment' with lowest search precedence
15:18:20.824 [main] DEBUG org.springframework.core.env.StandardEnvironment - Initialized StandardEnvironment with PropertySources [MapPropertySource@1147258851 {name='systemProperties', properties={java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=C:\Program Files\Java\jdk1.8.0_271\jre\bin, java.vm.version=25.271-b09, java.vm.vendor=Oracle Corporation, java.vendor.url=http://java.oracle.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=IN, user.script=, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api, java.runtime.version=1.8.0_271-b09, basedir=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=C:\Program Files\Java\jdk1.8.0_271\jre\lib\endorsed, os.arch=amd64, surefire.real.class.path=C:\Users\SHUBHA~1\AppData\Local\Temp\surefire300718036913513775\surefirebooter5637334560389609281.jar, java.io.tmpdir=C:\Users\SHUBHA~1\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, user.variant=, os.name=Windows 10, sun.jnu.encoding=Cp1252, java.library.path=C:\Program Files\Java\jdk1.8.0_271\jre\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\oraclexe\app\oracle\product\11.2.0\server\bin;S:\app\dekumark\product\18.0.0\client_1;S:\app\dekumark\product\18.0.0\client_1\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Java\jdk1.8.0_271\bin;C:\Program Files\Git\cmd;C:\Program Files\MongoDB\Server\4.4\bin;C:\Users\Shubham Kumar\Desktop\apache-maven-3.6.3\bin;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\Shubham Kumar\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Java\jdk1.8.0_271\bin;C:\Program Files\JetBrains\IntelliJ IDEA 2019.3.3\bin;;C:\Users\Shubham Kumar\AppData\Local\Programs\Microsoft VS Code\bin;;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.2.3\bin;;., surefire.test.class.path=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\test-classes;C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.0.1.RELEASE\spring-boot-starter-web-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter\2.0.1.RELEASE\spring-boot-starter-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot\2.0.1.RELEASE\spring-boot-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.0.1.RELEASE\spring-boot-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.0.1.RELEASE\spring-boot-starter-logging-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.10.0\log4j-to-slf4j-2.10.0.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\logging\log4j\log4j-api\2.10.0\log4j-api-2.10.0.jar;C:\Users\Shubham Kumar\.m2\repository\org\slf4j\jul-to-slf4j\1.7.25\jul-to-slf4j-1.7.25.jar;C:\Users\Shubham Kumar\.m2\repository\javax\annotation\javax.annotation-api\1.3.2\javax.annotation-api-1.3.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-json\2.0.1.RELEASE\spring-boot-starter-json-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.5\jackson-databind-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.5\jackson-core-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.9.5\jackson-datatype-jdk8-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.9.5\jackson-datatype-jsr310-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.9.5\jackson-module-parameter-names-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\2.0.1.RELEASE\spring-boot-starter-tomcat-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\8.5.29\tomcat-embed-core-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\8.5.29\tomcat-embed-el-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.5.29\tomcat-embed-websocket-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\validator\hibernate-validator\6.0.9.Final\hibernate-validator-6.0.9.Final.jar;C:\Users\Shubham Kumar\.m2\repository\javax\validation\validation-api\2.0.1.Final\validation-api-2.0.1.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-webmvc\5.0.5.RELEASE\spring-webmvc-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\io\swagger\swagger-annotations\1.5.18\swagger-annotations-1.5.18.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger2\2.6.1\springfox-swagger2-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\swagger\swagger-models\1.5.10\swagger-models-1.5.10.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-spi\2.6.1\springfox-spi-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-core\2.6.1\springfox-core-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-schema\2.6.1\springfox-schema-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger-common\2.6.1\springfox-swagger-common-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-spring-web\2.6.1\springfox-spring-web-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\com\google\guava\guava\18.0\guava-18.0.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\Shubham Kumar\.m2\repository\org\slf4j\slf4j-api\1.7.25\slf4j-api-1.7.25.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\plugin\spring-plugin-core\1.2.0.RELEASE\spring-plugin-core-1.2.0.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\plugin\spring-plugin-metadata\1.2.0.RELEASE\spring-plugin-metadata-1.2.0.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\mapstruct\mapstruct\1.0.0.Final\mapstruct-1.0.0.Final.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger-ui\2.6.1\springfox-swagger-ui-2.6.1.jar;C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-service\target\quora-service-1.0-SNAPSHOT.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-validation\2.0.1.RELEASE\spring-boot-starter-validation-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\2.0.1.RELEASE\spring-boot-starter-data-jpa-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-aop\2.0.1.RELEASE\spring-boot-starter-aop-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\aspectj\aspectjweaver\1.8.13\aspectjweaver-1.8.13.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.0.1.RELEASE\spring-boot-starter-jdbc-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\zaxxer\HikariCP\2.7.8\HikariCP-2.7.8.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-jdbc\5.0.5.RELEASE\spring-jdbc-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Shubham Kumar\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Shubham Kumar\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Shubham Kumar\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Shubham Kumar\.m2\repository\javax\transaction\javax.transaction-api\1.2\javax.transaction-api-1.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\data\spring-data-jpa\2.0.6.RELEASE\spring-data-jpa-2.0.6.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\data\spring-data-commons\2.0.6.RELEASE\spring-data-commons-2.0.6.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-orm\5.0.5.RELEASE\spring-orm-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-tx\5.0.5.RELEASE\spring-tx-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-aspects\5.0.5.RELEASE\spring-aspects-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\commons\commons-lang3\3.7\commons-lang3-3.7.jar;C:\Users\Shubham Kumar\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\Shubham Kumar\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\Shubham Kumar\.m2\repository\com\auth0\java-jwt\3.4.0\java-jwt-3.4.0.jar;C:\Users\Shubham Kumar\.m2\repository\commons-codec\commons-codec\1.11\commons-codec-1.11.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-test\2.0.1.RELEASE\spring-boot-starter-test-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-test\2.0.1.RELEASE\spring-boot-test-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\2.0.1.RELEASE\spring-boot-test-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar;C:\Users\Shubham Kumar\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar;C:\Users\Shubham Kumar\.m2\repository\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar;C:\Users\Shubham Kumar\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\Shubham Kumar\.m2\repository\org\assertj\assertj-core\3.9.1\assertj-core-3.9.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\mockito\mockito-core\2.15.0\mockito-core-2.15.0.jar;C:\Users\Shubham Kumar\.m2\repository\net\bytebuddy\byte-buddy\1.7.11\byte-buddy-1.7.11.jar;C:\Users\Shubham Kumar\.m2\repository\net\bytebuddy\byte-buddy-agent\1.7.11\byte-buddy-agent-1.7.11.jar;C:\Users\Shubham Kumar\.m2\repository\org\objenesis\objenesis\2.6\objenesis-2.6.jar;C:\Users\Shubham Kumar\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\Shubham Kumar\.m2\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;C:\Users\Shubham Kumar\.m2\repository\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\Shubham Kumar\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-core\5.0.5.RELEASE\spring-core-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-jcl\5.0.5.RELEASE\spring-jcl-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-test\5.0.5.RELEASE\spring-test-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\xmlunit\xmlunit-core\2.5.1\xmlunit-core-2.5.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-web\5.0.8.RELEASE\spring-web-5.0.8.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-beans\5.0.5.RELEASE\spring-beans-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.6\jackson-annotations-2.9.6.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-context\5.0.8.RELEASE\spring-context-5.0.8.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-aop\5.0.5.RELEASE\spring-aop-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-expression\5.0.5.RELEASE\spring-expression-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\postgresql\postgresql\42.2.2\postgresql-42.2.2.jar;, java.specification.name=Java Platform API Specification, java.class.version=52.0, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, os.version=10.0, user.home=C:\Users\Shubham Kumar, user.timezone=Asia/Calcutta, java.awt.printerjob=sun.awt.windows.WPrinterJob, file.encoding=Cp1252, java.specification.version=1.8, java.class.path=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\test-classes;C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.0.1.RELEASE\spring-boot-starter-web-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter\2.0.1.RELEASE\spring-boot-starter-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot\2.0.1.RELEASE\spring-boot-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.0.1.RELEASE\spring-boot-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.0.1.RELEASE\spring-boot-starter-logging-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.10.0\log4j-to-slf4j-2.10.0.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\logging\log4j\log4j-api\2.10.0\log4j-api-2.10.0.jar;C:\Users\Shubham Kumar\.m2\repository\org\slf4j\jul-to-slf4j\1.7.25\jul-to-slf4j-1.7.25.jar;C:\Users\Shubham Kumar\.m2\repository\javax\annotation\javax.annotation-api\1.3.2\javax.annotation-api-1.3.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-json\2.0.1.RELEASE\spring-boot-starter-json-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.5\jackson-databind-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.5\jackson-core-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.9.5\jackson-datatype-jdk8-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.9.5\jackson-datatype-jsr310-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.9.5\jackson-module-parameter-names-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\2.0.1.RELEASE\spring-boot-starter-tomcat-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\8.5.29\tomcat-embed-core-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\8.5.29\tomcat-embed-el-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.5.29\tomcat-embed-websocket-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\validator\hibernate-validator\6.0.9.Final\hibernate-validator-6.0.9.Final.jar;C:\Users\Shubham Kumar\.m2\repository\javax\validation\validation-api\2.0.1.Final\validation-api-2.0.1.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-webmvc\5.0.5.RELEASE\spring-webmvc-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\io\swagger\swagger-annotations\1.5.18\swagger-annotations-1.5.18.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger2\2.6.1\springfox-swagger2-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\swagger\swagger-models\1.5.10\swagger-models-1.5.10.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-spi\2.6.1\springfox-spi-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-core\2.6.1\springfox-core-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-schema\2.6.1\springfox-schema-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger-common\2.6.1\springfox-swagger-common-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-spring-web\2.6.1\springfox-spring-web-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\com\google\guava\guava\18.0\guava-18.0.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\Shubham Kumar\.m2\repository\org\slf4j\slf4j-api\1.7.25\slf4j-api-1.7.25.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\plugin\spring-plugin-core\1.2.0.RELEASE\spring-plugin-core-1.2.0.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\plugin\spring-plugin-metadata\1.2.0.RELEASE\spring-plugin-metadata-1.2.0.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\mapstruct\mapstruct\1.0.0.Final\mapstruct-1.0.0.Final.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger-ui\2.6.1\springfox-swagger-ui-2.6.1.jar;C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-service\target\quora-service-1.0-SNAPSHOT.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-validation\2.0.1.RELEASE\spring-boot-starter-validation-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\2.0.1.RELEASE\spring-boot-starter-data-jpa-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-aop\2.0.1.RELEASE\spring-boot-starter-aop-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\aspectj\aspectjweaver\1.8.13\aspectjweaver-1.8.13.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.0.1.RELEASE\spring-boot-starter-jdbc-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\zaxxer\HikariCP\2.7.8\HikariCP-2.7.8.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-jdbc\5.0.5.RELEASE\spring-jdbc-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Shubham Kumar\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Shubham Kumar\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Shubham Kumar\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Shubham Kumar\.m2\repository\javax\transaction\javax.transaction-api\1.2\javax.transaction-api-1.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\data\spring-data-jpa\2.0.6.RELEASE\spring-data-jpa-2.0.6.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\data\spring-data-commons\2.0.6.RELEASE\spring-data-commons-2.0.6.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-orm\5.0.5.RELEASE\spring-orm-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-tx\5.0.5.RELEASE\spring-tx-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-aspects\5.0.5.RELEASE\spring-aspects-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\commons\commons-lang3\3.7\commons-lang3-3.7.jar;C:\Users\Shubham Kumar\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\Shubham Kumar\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\Shubham Kumar\.m2\repository\com\auth0\java-jwt\3.4.0\java-jwt-3.4.0.jar;C:\Users\Shubham Kumar\.m2\repository\commons-codec\commons-codec\1.11\commons-codec-1.11.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-test\2.0.1.RELEASE\spring-boot-starter-test-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-test\2.0.1.RELEASE\spring-boot-test-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\2.0.1.RELEASE\spring-boot-test-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar;C:\Users\Shubham Kumar\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar;C:\Users\Shubham Kumar\.m2\repository\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar;C:\Users\Shubham Kumar\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\Shubham Kumar\.m2\repository\org\assertj\assertj-core\3.9.1\assertj-core-3.9.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\mockito\mockito-core\2.15.0\mockito-core-2.15.0.jar;C:\Users\Shubham Kumar\.m2\repository\net\bytebuddy\byte-buddy\1.7.11\byte-buddy-1.7.11.jar;C:\Users\Shubham Kumar\.m2\repository\net\bytebuddy\byte-buddy-agent\1.7.11\byte-buddy-agent-1.7.11.jar;C:\Users\Shubham Kumar\.m2\repository\org\objenesis\objenesis\2.6\objenesis-2.6.jar;C:\Users\Shubham Kumar\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\Shubham Kumar\.m2\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;C:\Users\Shubham Kumar\.m2\repository\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\Shubham Kumar\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-core\5.0.5.RELEASE\spring-core-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-jcl\5.0.5.RELEASE\spring-jcl-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-test\5.0.5.RELEASE\spring-test-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\xmlunit\xmlunit-core\2.5.1\xmlunit-core-2.5.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-web\5.0.8.RELEASE\spring-web-5.0.8.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-beans\5.0.5.RELEASE\spring-beans-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.6\jackson-annotations-2.9.6.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-context\5.0.8.RELEASE\spring-context-5.0.8.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-aop\5.0.5.RELEASE\spring-aop-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-expression\5.0.5.RELEASE\spring-expression-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\postgresql\postgresql\42.2.2\postgresql-42.2.2.jar;, user.name=Shubham Kumar, java.vm.specification.version=1.8, sun.java.command=C:\Users\SHUBHA~1\AppData\Local\Temp\surefire300718036913513775\surefirebooter5637334560389609281.jar C:\Users\Shubham Kumar\AppData\Local\Temp\surefire300718036913513775 2020-12-02T15-18-03_132-jvmRun1 surefire3045173883509485074tmp surefire_09212742268587425037tmp, java.home=C:\Program Files\Java\jdk1.8.0_271\jre, sun.arch.data.model=64, user.language=en, java.specification.vendor=Oracle Corporation, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.8.0_271, java.ext.dirs=C:\Program Files\Java\jdk1.8.0_271\jre\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.boot.class.path=C:\Program Files\Java\jdk1.8.0_271\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_271\jre\classes, java.vendor=Oracle Corporation, localRepository=C:\Users\Shubham Kumar\.m2\repository, file.separator=\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, sun.io.unicode.encoding=UnicodeLittle, sun.cpu.endian=little, sun.desktop=windows, sun.cpu.isalist=amd64}}, SystemEnvironmentPropertySource@891095110 {name='systemEnvironment', properties={PATH=C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\oraclexe\app\oracle\product\11.2.0\server\bin;S:\app\dekumark\product\18.0.0\client_1;S:\app\dekumark\product\18.0.0\client_1\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Java\jdk1.8.0_271\bin;C:\Program Files\Git\cmd;C:\Program Files\MongoDB\Server\4.4\bin;C:\Users\Shubham Kumar\Desktop\apache-maven-3.6.3\bin;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\Shubham Kumar\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Java\jdk1.8.0_271\bin;C:\Program Files\JetBrains\IntelliJ IDEA 2019.3.3\bin;;C:\Users\Shubham Kumar\AppData\Local\Programs\Microsoft VS Code\bin;;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.2.3\bin;, USERDOMAIN_ROAMINGPROFILE=DESKTOP-OM1CCRJ, PROCESSOR_LEVEL=6, SYSTEMDRIVE=C:, SESSIONNAME=Console, ALLUSERSPROFILE=C:\ProgramData, PROCESSOR_ARCHITECTURE=AMD64, DRIVERDATA=C:\Windows\System32\Drivers\DriverData, __INTELLIJ_COMMAND_HISTFILE__=C:\Users\Shubham Kumar\AppData\Roaming\JetBrains\IdeaIC2020.2\terminal\history\history-101, MAVEN_HOME=C:\Users\Shubham Kumar\Desktop\apache-maven-3.6.3\bin\.., PROGRAMFILES=C:\Program Files, PSMODULEPATH=C:\Program Files\WindowsPowerShell\Modules;C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules, PROGRAMDATA=C:\ProgramData, USERNAME=Shubham Kumar, WDIR=C:\, ONEDRIVE=C:\Users\Shubham Kumar\OneDrive, PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC, ONEDRIVECONSUMER=C:\Users\Shubham Kumar\OneDrive, CLASSWORLDS_JAR="C:\Users\Shubham Kumar\Desktop\apache-maven-3.6.3\bin\..\boot\plexus-classworlds-2.6.0.jar", WINDIR=C:\WINDOWS, HOMEPATH=\Users\Shubham Kumar, PROCESSOR_IDENTIFIER=Intel64 Family 6 Model 142 Stepping 9, GenuineIntel, PUBLIC=C:\Users\Public, =::=::\, =EXITCODE=00000000, LOCALAPPDATA=C:\Users\Shubham Kumar\AppData\Local, COMMONPROGRAMFILES(X86)=C:\Program Files (x86)\Common Files, USERDOMAIN=DESKTOP-OM1CCRJ, LOGONSERVER=\\DESKTOP-OM1CCRJ, JAVA_HOME=C:\Program Files\Java\jdk1.8.0_271, PROMPT=$P$G, PROGRAMFILES(X86)=C:\Program Files (x86), ERROR_CODE=0, EXEC_DIR=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora, INTELLIJ IDEA=C:\Program Files\JetBrains\IntelliJ IDEA 2019.3.3\bin;, =C:=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api, APPDATA=C:\Users\Shubham Kumar\AppData\Roaming, PROGRAMW6432=C:\Program Files, SYSTEMROOT=C:\WINDOWS, MAVEN_CMD_LINE_ARGS=clean install, OS=Windows_NT, COMMONPROGRAMW6432=C:\Program Files\Common Files, COMPUTERNAME=DESKTOP-OM1CCRJ, INTELLIJ IDEA COMMUNITY EDITION=C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.2.3\bin;, COMMONPROGRAMFILES=C:\Program Files\Common Files, COMSPEC=C:\WINDOWS\system32\cmd.exe, JAVACMD=C:\Program Files\Java\jdk1.8.0_271\bin\java.exe, MAVEN_PROJECTBASEDIR=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora, PROCESSOR_REVISION=8e09, CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher, TERMINAL_EMULATOR=JetBrains-JediTerm, TEMP=C:\Users\SHUBHA~1\AppData\Local\Temp, HOMEDRIVE=C:, USERPROFILE=C:\Users\Shubham Kumar, TMP=C:\Users\SHUBHA~1\AppData\Local\Temp, NUMBER_OF_PROCESSORS=4, JVMCONFIG=\.mvn\jvm.config, IDEA_INITIAL_DIRECTORY=C:\Users\Shubham Kumar\Desktop}}]
15:18:20.854 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver - Resolved classpath location [com/upgrad/quora/api/controller/] to resources [URL [file:/C:/Users/Shubham%20Kumar/Desktop/Quora%20Project/Trello_quora/quora-api/target/test-classes/com/upgrad/quora/api/controller/], URL [file:/C:/Users/Shubham%20Kumar/Desktop/Quora%20Project/Trello_quora/quora-api/target/classes/com/upgrad/quora/api/controller/]]
15:18:20.855 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver - Looking for matching resources in directory tree [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\test-classes\com\upgrad\quora\api\controller]
15:18:20.855 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\test-classes\com\upgrad\quora\api\controller] for files matching pattern [C:/Users/Shubham Kumar/Desktop/Quora Project/Trello_quora/quora-api/target/test-classes/com/upgrad/quora/api/controller/*.class]
15:18:20.860 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver - Looking for matching resources in directory tree [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes\com\upgrad\quora\api\controller]
15:18:20.861 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes\com\upgrad\quora\api\controller] for files matching pattern [C:/Users/Shubham Kumar/Desktop/Quora Project/Trello_quora/quora-api/target/classes/com/upgrad/quora/api/controller/*.class]
15:18:20.862 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver - Resolved location pattern [classpath*:com/upgrad/quora/api/controller/*.class] to resources [file [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\test-classes\com\upgrad\quora\api\controller\AnswerControllerTest.class], file [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes\com\upgrad\quora\api\controller\AnswerController.class], file [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes\com\upgrad\quora\api\controller\QuestionController.class], file [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes\com\upgrad\quora\api\controller\UserController.class]]
15:18:20.977 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver - Resolved classpath location [com/upgrad/quora/api/] to resources [URL [file:/C:/Users/Shubham%20Kumar/Desktop/Quora%20Project/Trello_quora/quora-api/target/test-classes/com/upgrad/quora/api/], URL [file:/C:/Users/Shubham%20Kumar/Desktop/Quora%20Project/Trello_quora/quora-api/target/classes/com/upgrad/quora/api/]]
15:18:20.978 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver - Looking for matching resources in directory tree [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\test-classes\com\upgrad\quora\api]
15:18:20.979 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\test-classes\com\upgrad\quora\api] for files matching pattern [C:/Users/Shubham Kumar/Desktop/Quora Project/Trello_quora/quora-api/target/test-classes/com/upgrad/quora/api/*.class]
15:18:20.979 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver - Looking for matching resources in directory tree [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes\com\upgrad\quora\api]
15:18:20.980 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes\com\upgrad\quora\api] for files matching pattern [C:/Users/Shubham Kumar/Desktop/Quora Project/Trello_quora/quora-api/target/classes/com/upgrad/quora/api/*.class]
15:18:20.988 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver - Resolved location pattern [classpath*:com/upgrad/quora/api/*.class] to resources [file [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes\com\upgrad\quora\api\QuoraApiApplication.class]]
15:18:21.035 [main] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes\com\upgrad\quora\api\QuoraApiApplication.class]
15:18:21.039 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.upgrad.quora.api.QuoraApiApplication for test class com.upgrad.quora.api.controller.AnswerControllerTest
15:18:21.405 [main] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - @TestExecutionListeners is not present for class [com.upgrad.quora.api.controller.AnswerControllerTest]: using defaults.
15:18:21.406 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]
15:18:21.460 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@192c3f1e, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@26b3fd41, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@7494f96a, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@561b6512, org.springframework.test.context.support.DirtiesContextTestExecutionListener@2e377400, org.springframework.test.context.transaction.TransactionalTestExecutionListener@1757cd72, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@445b295b, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@49e5f737, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@5c671d7f, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@757277dc, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@687e99d8, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@e4487af]
15:18:21.464 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [com.upgrad.quora.api.controller.AnswerControllerTest]
15:18:21.464 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [com.upgrad.quora.api.controller.AnswerControllerTest]
15:18:21.469 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [com.upgrad.quora.api.controller.AnswerControllerTest]
15:18:21.470 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [com.upgrad.quora.api.controller.AnswerControllerTest]
15:18:21.471 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [com.upgrad.quora.api.controller.AnswerControllerTest]
15:18:21.472 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [com.upgrad.quora.api.controller.AnswerControllerTest]
15:18:21.480 [main] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@2898ac89 testClass = AnswerControllerTest, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@683dbc2c testClass = AnswerControllerTest, locations = '{}', classes = '{class com.upgrad.quora.api.QuoraApiApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[[ImportsContextCustomizer@68267da0 key = [org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@32464a14, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1ee807c6, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@11e21d0e, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@e7e8512, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@16267862], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true]], class annotated with @DirtiesContext [false] with mode [null].
15:18:21.482 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [com.upgrad.quora.api.controller.AnswerControllerTest]
15:18:21.483 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [com.upgrad.quora.api.controller.AnswerControllerTest]
15:18:21.533 [main] DEBUG org.springframework.core.env.StandardEnvironment - Adding PropertySource 'systemProperties' with lowest search precedence
15:18:21.533 [main] DEBUG org.springframework.core.env.StandardEnvironment - Adding PropertySource 'systemEnvironment' with lowest search precedence
15:18:21.533 [main] DEBUG org.springframework.core.env.StandardEnvironment - Initialized StandardEnvironment with PropertySources [MapPropertySource@812446698 {name='systemProperties', properties={java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=C:\Program Files\Java\jdk1.8.0_271\jre\bin, java.vm.version=25.271-b09, java.vm.vendor=Oracle Corporation, java.vendor.url=http://java.oracle.com/, path.separator=;, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=IN, user.script=, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api, java.runtime.version=1.8.0_271-b09, basedir=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=C:\Program Files\Java\jdk1.8.0_271\jre\lib\endorsed, os.arch=amd64, surefire.real.class.path=C:\Users\SHUBHA~1\AppData\Local\Temp\surefire300718036913513775\surefirebooter5637334560389609281.jar, java.io.tmpdir=C:\Users\SHUBHA~1\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, user.variant=, os.name=Windows 10, sun.jnu.encoding=Cp1252, java.library.path=C:\Program Files\Java\jdk1.8.0_271\jre\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\oraclexe\app\oracle\product\11.2.0\server\bin;S:\app\dekumark\product\18.0.0\client_1;S:\app\dekumark\product\18.0.0\client_1\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Java\jdk1.8.0_271\bin;C:\Program Files\Git\cmd;C:\Program Files\MongoDB\Server\4.4\bin;C:\Users\Shubham Kumar\Desktop\apache-maven-3.6.3\bin;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\Shubham Kumar\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Java\jdk1.8.0_271\bin;C:\Program Files\JetBrains\IntelliJ IDEA 2019.3.3\bin;;C:\Users\Shubham Kumar\AppData\Local\Programs\Microsoft VS Code\bin;;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.2.3\bin;;., surefire.test.class.path=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\test-classes;C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.0.1.RELEASE\spring-boot-starter-web-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter\2.0.1.RELEASE\spring-boot-starter-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot\2.0.1.RELEASE\spring-boot-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.0.1.RELEASE\spring-boot-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.0.1.RELEASE\spring-boot-starter-logging-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.10.0\log4j-to-slf4j-2.10.0.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\logging\log4j\log4j-api\2.10.0\log4j-api-2.10.0.jar;C:\Users\Shubham Kumar\.m2\repository\org\slf4j\jul-to-slf4j\1.7.25\jul-to-slf4j-1.7.25.jar;C:\Users\Shubham Kumar\.m2\repository\javax\annotation\javax.annotation-api\1.3.2\javax.annotation-api-1.3.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-json\2.0.1.RELEASE\spring-boot-starter-json-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.5\jackson-databind-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.5\jackson-core-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.9.5\jackson-datatype-jdk8-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.9.5\jackson-datatype-jsr310-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.9.5\jackson-module-parameter-names-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\2.0.1.RELEASE\spring-boot-starter-tomcat-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\8.5.29\tomcat-embed-core-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\8.5.29\tomcat-embed-el-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.5.29\tomcat-embed-websocket-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\validator\hibernate-validator\6.0.9.Final\hibernate-validator-6.0.9.Final.jar;C:\Users\Shubham Kumar\.m2\repository\javax\validation\validation-api\2.0.1.Final\validation-api-2.0.1.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-webmvc\5.0.5.RELEASE\spring-webmvc-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\io\swagger\swagger-annotations\1.5.18\swagger-annotations-1.5.18.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger2\2.6.1\springfox-swagger2-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\swagger\swagger-models\1.5.10\swagger-models-1.5.10.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-spi\2.6.1\springfox-spi-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-core\2.6.1\springfox-core-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-schema\2.6.1\springfox-schema-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger-common\2.6.1\springfox-swagger-common-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-spring-web\2.6.1\springfox-spring-web-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\com\google\guava\guava\18.0\guava-18.0.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\Shubham Kumar\.m2\repository\org\slf4j\slf4j-api\1.7.25\slf4j-api-1.7.25.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\plugin\spring-plugin-core\1.2.0.RELEASE\spring-plugin-core-1.2.0.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\plugin\spring-plugin-metadata\1.2.0.RELEASE\spring-plugin-metadata-1.2.0.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\mapstruct\mapstruct\1.0.0.Final\mapstruct-1.0.0.Final.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger-ui\2.6.1\springfox-swagger-ui-2.6.1.jar;C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-service\target\quora-service-1.0-SNAPSHOT.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-validation\2.0.1.RELEASE\spring-boot-starter-validation-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\2.0.1.RELEASE\spring-boot-starter-data-jpa-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-aop\2.0.1.RELEASE\spring-boot-starter-aop-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\aspectj\aspectjweaver\1.8.13\aspectjweaver-1.8.13.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.0.1.RELEASE\spring-boot-starter-jdbc-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\zaxxer\HikariCP\2.7.8\HikariCP-2.7.8.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-jdbc\5.0.5.RELEASE\spring-jdbc-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Shubham Kumar\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Shubham Kumar\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Shubham Kumar\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Shubham Kumar\.m2\repository\javax\transaction\javax.transaction-api\1.2\javax.transaction-api-1.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\data\spring-data-jpa\2.0.6.RELEASE\spring-data-jpa-2.0.6.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\data\spring-data-commons\2.0.6.RELEASE\spring-data-commons-2.0.6.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-orm\5.0.5.RELEASE\spring-orm-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-tx\5.0.5.RELEASE\spring-tx-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-aspects\5.0.5.RELEASE\spring-aspects-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\commons\commons-lang3\3.7\commons-lang3-3.7.jar;C:\Users\Shubham Kumar\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\Shubham Kumar\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\Shubham Kumar\.m2\repository\com\auth0\java-jwt\3.4.0\java-jwt-3.4.0.jar;C:\Users\Shubham Kumar\.m2\repository\commons-codec\commons-codec\1.11\commons-codec-1.11.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-test\2.0.1.RELEASE\spring-boot-starter-test-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-test\2.0.1.RELEASE\spring-boot-test-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\2.0.1.RELEASE\spring-boot-test-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar;C:\Users\Shubham Kumar\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar;C:\Users\Shubham Kumar\.m2\repository\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar;C:\Users\Shubham Kumar\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\Shubham Kumar\.m2\repository\org\assertj\assertj-core\3.9.1\assertj-core-3.9.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\mockito\mockito-core\2.15.0\mockito-core-2.15.0.jar;C:\Users\Shubham Kumar\.m2\repository\net\bytebuddy\byte-buddy\1.7.11\byte-buddy-1.7.11.jar;C:\Users\Shubham Kumar\.m2\repository\net\bytebuddy\byte-buddy-agent\1.7.11\byte-buddy-agent-1.7.11.jar;C:\Users\Shubham Kumar\.m2\repository\org\objenesis\objenesis\2.6\objenesis-2.6.jar;C:\Users\Shubham Kumar\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\Shubham Kumar\.m2\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;C:\Users\Shubham Kumar\.m2\repository\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\Shubham Kumar\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-core\5.0.5.RELEASE\spring-core-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-jcl\5.0.5.RELEASE\spring-jcl-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-test\5.0.5.RELEASE\spring-test-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\xmlunit\xmlunit-core\2.5.1\xmlunit-core-2.5.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-web\5.0.8.RELEASE\spring-web-5.0.8.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-beans\5.0.5.RELEASE\spring-beans-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.6\jackson-annotations-2.9.6.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-context\5.0.8.RELEASE\spring-context-5.0.8.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-aop\5.0.5.RELEASE\spring-aop-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-expression\5.0.5.RELEASE\spring-expression-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\postgresql\postgresql\42.2.2\postgresql-42.2.2.jar;, java.specification.name=Java Platform API Specification, java.class.version=52.0, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, os.version=10.0, user.home=C:\Users\Shubham Kumar, user.timezone=Asia/Calcutta, java.awt.printerjob=sun.awt.windows.WPrinterJob, file.encoding=Cp1252, java.specification.version=1.8, java.class.path=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\test-classes;C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api\target\classes;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.0.1.RELEASE\spring-boot-starter-web-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter\2.0.1.RELEASE\spring-boot-starter-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot\2.0.1.RELEASE\spring-boot-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.0.1.RELEASE\spring-boot-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.0.1.RELEASE\spring-boot-starter-logging-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.10.0\log4j-to-slf4j-2.10.0.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\logging\log4j\log4j-api\2.10.0\log4j-api-2.10.0.jar;C:\Users\Shubham Kumar\.m2\repository\org\slf4j\jul-to-slf4j\1.7.25\jul-to-slf4j-1.7.25.jar;C:\Users\Shubham Kumar\.m2\repository\javax\annotation\javax.annotation-api\1.3.2\javax.annotation-api-1.3.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-json\2.0.1.RELEASE\spring-boot-starter-json-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.5\jackson-databind-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.5\jackson-core-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.9.5\jackson-datatype-jdk8-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.9.5\jackson-datatype-jsr310-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.9.5\jackson-module-parameter-names-2.9.5.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\2.0.1.RELEASE\spring-boot-starter-tomcat-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\8.5.29\tomcat-embed-core-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\8.5.29\tomcat-embed-el-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.5.29\tomcat-embed-websocket-8.5.29.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\validator\hibernate-validator\6.0.9.Final\hibernate-validator-6.0.9.Final.jar;C:\Users\Shubham Kumar\.m2\repository\javax\validation\validation-api\2.0.1.Final\validation-api-2.0.1.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-webmvc\5.0.5.RELEASE\spring-webmvc-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\io\swagger\swagger-annotations\1.5.18\swagger-annotations-1.5.18.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger2\2.6.1\springfox-swagger2-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\swagger\swagger-models\1.5.10\swagger-models-1.5.10.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-spi\2.6.1\springfox-spi-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-core\2.6.1\springfox-core-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-schema\2.6.1\springfox-schema-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger-common\2.6.1\springfox-swagger-common-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-spring-web\2.6.1\springfox-spring-web-2.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\com\google\guava\guava\18.0\guava-18.0.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\Shubham Kumar\.m2\repository\org\slf4j\slf4j-api\1.7.25\slf4j-api-1.7.25.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\plugin\spring-plugin-core\1.2.0.RELEASE\spring-plugin-core-1.2.0.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\plugin\spring-plugin-metadata\1.2.0.RELEASE\spring-plugin-metadata-1.2.0.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\mapstruct\mapstruct\1.0.0.Final\mapstruct-1.0.0.Final.jar;C:\Users\Shubham Kumar\.m2\repository\io\springfox\springfox-swagger-ui\2.6.1\springfox-swagger-ui-2.6.1.jar;C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-service\target\quora-service-1.0-SNAPSHOT.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-validation\2.0.1.RELEASE\spring-boot-starter-validation-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\2.0.1.RELEASE\spring-boot-starter-data-jpa-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-aop\2.0.1.RELEASE\spring-boot-starter-aop-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\aspectj\aspectjweaver\1.8.13\aspectjweaver-1.8.13.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.0.1.RELEASE\spring-boot-starter-jdbc-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\zaxxer\HikariCP\2.7.8\HikariCP-2.7.8.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-jdbc\5.0.5.RELEASE\spring-jdbc-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Shubham Kumar\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Shubham Kumar\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Shubham Kumar\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Shubham Kumar\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Shubham Kumar\.m2\repository\javax\transaction\javax.transaction-api\1.2\javax.transaction-api-1.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\data\spring-data-jpa\2.0.6.RELEASE\spring-data-jpa-2.0.6.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\data\spring-data-commons\2.0.6.RELEASE\spring-data-commons-2.0.6.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-orm\5.0.5.RELEASE\spring-orm-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-tx\5.0.5.RELEASE\spring-tx-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-aspects\5.0.5.RELEASE\spring-aspects-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\apache\commons\commons-lang3\3.7\commons-lang3-3.7.jar;C:\Users\Shubham Kumar\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\Shubham Kumar\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\Shubham Kumar\.m2\repository\com\auth0\java-jwt\3.4.0\java-jwt-3.4.0.jar;C:\Users\Shubham Kumar\.m2\repository\commons-codec\commons-codec\1.11\commons-codec-1.11.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-starter-test\2.0.1.RELEASE\spring-boot-starter-test-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-test\2.0.1.RELEASE\spring-boot-test-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\2.0.1.RELEASE\spring-boot-test-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar;C:\Users\Shubham Kumar\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar;C:\Users\Shubham Kumar\.m2\repository\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar;C:\Users\Shubham Kumar\.m2\repository\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar;C:\Users\Shubham Kumar\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\Shubham Kumar\.m2\repository\org\assertj\assertj-core\3.9.1\assertj-core-3.9.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\mockito\mockito-core\2.15.0\mockito-core-2.15.0.jar;C:\Users\Shubham Kumar\.m2\repository\net\bytebuddy\byte-buddy\1.7.11\byte-buddy-1.7.11.jar;C:\Users\Shubham Kumar\.m2\repository\net\bytebuddy\byte-buddy-agent\1.7.11\byte-buddy-agent-1.7.11.jar;C:\Users\Shubham Kumar\.m2\repository\org\objenesis\objenesis\2.6\objenesis-2.6.jar;C:\Users\Shubham Kumar\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\Shubham Kumar\.m2\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;C:\Users\Shubham Kumar\.m2\repository\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\Shubham Kumar\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-core\5.0.5.RELEASE\spring-core-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-jcl\5.0.5.RELEASE\spring-jcl-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-test\5.0.5.RELEASE\spring-test-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\xmlunit\xmlunit-core\2.5.1\xmlunit-core-2.5.1.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-web\5.0.8.RELEASE\spring-web-5.0.8.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-beans\5.0.5.RELEASE\spring-beans-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.6\jackson-annotations-2.9.6.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-context\5.0.8.RELEASE\spring-context-5.0.8.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-aop\5.0.5.RELEASE\spring-aop-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\springframework\spring-expression\5.0.5.RELEASE\spring-expression-5.0.5.RELEASE.jar;C:\Users\Shubham Kumar\.m2\repository\org\postgresql\postgresql\42.2.2\postgresql-42.2.2.jar;, user.name=Shubham Kumar, java.vm.specification.version=1.8, sun.java.command=C:\Users\SHUBHA~1\AppData\Local\Temp\surefire300718036913513775\surefirebooter5637334560389609281.jar C:\Users\Shubham Kumar\AppData\Local\Temp\surefire300718036913513775 2020-12-02T15-18-03_132-jvmRun1 surefire3045173883509485074tmp surefire_09212742268587425037tmp, java.home=C:\Program Files\Java\jdk1.8.0_271\jre, sun.arch.data.model=64, user.language=en, java.specification.vendor=Oracle Corporation, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.8.0_271, java.ext.dirs=C:\Program Files\Java\jdk1.8.0_271\jre\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.boot.class.path=C:\Program Files\Java\jdk1.8.0_271\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_271\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_271\jre\classes, java.vendor=Oracle Corporation, localRepository=C:\Users\Shubham Kumar\.m2\repository, file.separator=\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, sun.io.unicode.encoding=UnicodeLittle, sun.cpu.endian=little, sun.desktop=windows, sun.cpu.isalist=amd64}}, SystemEnvironmentPropertySource@737077247 {name='systemEnvironment', properties={PATH=C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\oraclexe\app\oracle\product\11.2.0\server\bin;S:\app\dekumark\product\18.0.0\client_1;S:\app\dekumark\product\18.0.0\client_1\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Java\jdk1.8.0_271\bin;C:\Program Files\Git\cmd;C:\Program Files\MongoDB\Server\4.4\bin;C:\Users\Shubham Kumar\Desktop\apache-maven-3.6.3\bin;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\Shubham Kumar\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Java\jdk1.8.0_271\bin;C:\Program Files\JetBrains\IntelliJ IDEA 2019.3.3\bin;;C:\Users\Shubham Kumar\AppData\Local\Programs\Microsoft VS Code\bin;;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.2.3\bin;, USERDOMAIN_ROAMINGPROFILE=DESKTOP-OM1CCRJ, PROCESSOR_LEVEL=6, SYSTEMDRIVE=C:, SESSIONNAME=Console, ALLUSERSPROFILE=C:\ProgramData, PROCESSOR_ARCHITECTURE=AMD64, DRIVERDATA=C:\Windows\System32\Drivers\DriverData, __INTELLIJ_COMMAND_HISTFILE__=C:\Users\Shubham Kumar\AppData\Roaming\JetBrains\IdeaIC2020.2\terminal\history\history-101, MAVEN_HOME=C:\Users\Shubham Kumar\Desktop\apache-maven-3.6.3\bin\.., PROGRAMFILES=C:\Program Files, PSMODULEPATH=C:\Program Files\WindowsPowerShell\Modules;C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules, PROGRAMDATA=C:\ProgramData, USERNAME=Shubham Kumar, WDIR=C:\, ONEDRIVE=C:\Users\Shubham Kumar\OneDrive, PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC, ONEDRIVECONSUMER=C:\Users\Shubham Kumar\OneDrive, CLASSWORLDS_JAR="C:\Users\Shubham Kumar\Desktop\apache-maven-3.6.3\bin\..\boot\plexus-classworlds-2.6.0.jar", WINDIR=C:\WINDOWS, HOMEPATH=\Users\Shubham Kumar, PROCESSOR_IDENTIFIER=Intel64 Family 6 Model 142 Stepping 9, GenuineIntel, PUBLIC=C:\Users\Public, =::=::\, =EXITCODE=00000000, LOCALAPPDATA=C:\Users\Shubham Kumar\AppData\Local, COMMONPROGRAMFILES(X86)=C:\Program Files (x86)\Common Files, USERDOMAIN=DESKTOP-OM1CCRJ, LOGONSERVER=\\DESKTOP-OM1CCRJ, JAVA_HOME=C:\Program Files\Java\jdk1.8.0_271, PROMPT=$P$G, PROGRAMFILES(X86)=C:\Program Files (x86), ERROR_CODE=0, EXEC_DIR=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora, INTELLIJ IDEA=C:\Program Files\JetBrains\IntelliJ IDEA 2019.3.3\bin;, =C:=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api, APPDATA=C:\Users\Shubham Kumar\AppData\Roaming, PROGRAMW6432=C:\Program Files, SYSTEMROOT=C:\WINDOWS, MAVEN_CMD_LINE_ARGS=clean install, OS=Windows_NT, COMMONPROGRAMW6432=C:\Program Files\Common Files, COMPUTERNAME=DESKTOP-OM1CCRJ, INTELLIJ IDEA COMMUNITY EDITION=C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.2.3\bin;, COMMONPROGRAMFILES=C:\Program Files\Common Files, COMSPEC=C:\WINDOWS\system32\cmd.exe, JAVACMD=C:\Program Files\Java\jdk1.8.0_271\bin\java.exe, MAVEN_PROJECTBASEDIR=C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora, PROCESSOR_REVISION=8e09, CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher, TERMINAL_EMULATOR=JetBrains-JediTerm, TEMP=C:\Users\SHUBHA~1\AppData\Local\Temp, HOMEDRIVE=C:, USERPROFILE=C:\Users\Shubham Kumar, TMP=C:\Users\SHUBHA~1\AppData\Local\Temp, NUMBER_OF_PROCESSORS=4, JVMCONFIG=\.mvn\jvm.config, IDEA_INITIAL_DIRECTORY=C:\Users\Shubham Kumar\Desktop}}]
15:18:21.541 [main] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=-1}
15:18:21.541 [main] DEBUG org.springframework.core.env.StandardEnvironment - Adding PropertySource 'Inlined Test Properties' with highest search precedence

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.0.1.RELEASE)

2020-12-02 15:18:22.403  INFO 18828 --- [           main] c.u.q.a.controller.AnswerControllerTest  : Starting AnswerControllerTest on DESKTOP-OM1CCRJ with PID 18828 (started by Shubham Kumar in C:\Users\Shubham Kumar\Desktop\Quora Project\Trello_quora\quora-api)
2020-12-02 15:18:22.406  INFO 18828 --- [           main] c.u.q.a.controller.AnswerControllerTest  : No active profile set, falling back to default profiles: default
2020-12-02 15:18:22.457  INFO 18828 --- [           main] o.s.w.c.s.GenericWebApplicationContext   : Refreshing org.springframework.web.context.support.GenericWebApplicationContext@57a3e26a: startup date [Wed Dec 02 15:18:22 IST 2020]; root of context hierarchy
2020-12-02 15:18:26.365  INFO 18828 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c9da78e8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-12-02 15:18:26.974  INFO 18828 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-12-02 15:18:27.344  INFO 18828 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-12-02 15:18:27.477  INFO 18828 --- [           main] j.LocalContainerEntityManagerFactoryBean : Building JPA container EntityManagerFactory for persistence unit 'default'
2020-12-02 15:18:27.534  INFO 18828 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-12-02 15:18:27.851  INFO 18828 --- [           main] org.hibernate.Version                    : HHH000412: Hibernate Core {5.2.16.Final}
2020-12-02 15:18:27.855  INFO 18828 --- [           main] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2020-12-02 15:18:27.989  INFO 18828 --- [           main] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2020-12-02 15:18:28.482  INFO 18828 --- [           main] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL9Dialect
2020-12-02 15:18:28.531  INFO 18828 --- [           main] o.h.e.j.e.i.LobCreatorBuilderImpl        : HHH000422: Disabling contextual LOB creation as connection was null
2020-12-02 15:18:28.537  INFO 18828 --- [           main] org.hibernate.type.BasicTypeRegistry     : HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@3330f3ad
2020-12-02 15:18:30.278  INFO 18828 --- [           main] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2020-12-02 15:18:30.570  INFO 18828 --- [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-12-02 15:18:32.667  WARN 18828 --- [           main] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-12-02 15:18:32.898  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/answer/delete/{answerId}],methods=[DELETE],produces=[application/json;charset=UTF-8]}" onto public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException
2020-12-02 15:18:32.900  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/question/{questionId}/answer/create],methods=[POST],consumes=[application/json;charset=UTF-8],produces=[application/json;charset=UTF-8]}" onto public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException
2020-12-02 15:18:32.902  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/answer/all/{questionId}],methods=[GET],produces=[application/json;charset=UTF-8]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException
2020-12-02 15:18:32.904  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/answer/edit/{answerId}],methods=[PUT],consumes=[application/json;charset=UTF-8],produces=[application/json;charset=UTF-8]}" onto public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException
2020-12-02 15:18:32.906  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/question/create],methods=[POST],consumes=[application/json;charset=UTF-8],produces=[application/json;charset=UTF-8]}" onto public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.QuestionResponse> com.upgrad.quora.api.controller.QuestionController.createQuestion(com.upgrad.quora.api.model.QuestionRequest,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.UserNotFoundException
2020-12-02 15:18:32.915  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/user/signup],methods=[POST],consumes=[application/json;charset=UTF-8],produces=[application/json;charset=UTF-8]}" onto public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.SignupUserResponse> com.upgrad.quora.api.controller.UserController.signup(com.upgrad.quora.api.model.SignupUserRequest) throws com.upgrad.quora.service.exception.SignUpRestrictedException
2020-12-02 15:18:32.915  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/user/signin],methods=[POST],produces=[application/json;charset=UTF-8]}" onto public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.SigninResponse> com.upgrad.quora.api.controller.UserController.signIn(java.lang.String) throws com.upgrad.quora.service.exception.AuthenticationFailedException
2020-12-02 15:18:32.917  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/user/signout],methods=[POST],produces=[application/json;charset=UTF-8]}" onto public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.SignoutResponse> com.upgrad.quora.api.controller.UserController.signout(java.lang.String) throws com.upgrad.quora.service.exception.SignOutRestrictedException
2020-12-02 15:18:32.920  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2020-12-02 15:18:32.930  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2020-12-02 15:18:32.931  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2020-12-02 15:18:32.931  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2020-12-02 15:18:32.940  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2020-12-02 15:18:32.942  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2020-12-02 15:18:34.305  INFO 18828 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-12-02 15:18:34.938  INFO 18828 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.web.context.support.GenericWebApplicationContext@57a3e26a: startup date [Wed Dec 02 15:18:22 IST 2020]; root of context hierarchy
2020-12-02 15:18:35.097  INFO 18828 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-12-02 15:18:35.098  INFO 18828 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-12-02 15:18:35.129  INFO 18828 --- [           main] .m.m.a.ExceptionHandlerExceptionResolver : Detected @ExceptionHandler methods in restExceptionHandler
2020-12-02 15:18:35.971  INFO 18828 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring FrameworkServlet ''
2020-12-02 15:18:35.978  INFO 18828 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : FrameworkServlet '': initialization started
2020-12-02 15:18:36.012  INFO 18828 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : FrameworkServlet '': initialization completed in 34 ms
2020-12-02 15:18:36.116  INFO 18828 --- [           main] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 2147483647
2020-12-02 15:18:36.117  INFO 18828 --- [           main] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-12-02 15:18:36.159  INFO 18828 --- [           main] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-12-02 15:18:36.188  INFO 18828 --- [           main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-12-02 15:18:36.776  INFO 18828 --- [           main] c.u.q.a.controller.AnswerControllerTest  : Started AnswerControllerTest in 15.207 seconds (JVM running for 17.878)
Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="getAllAnswersToNonExistingQuestion" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.171">
    <failure message="JSON path &quot;code&quot; expected:&lt;QUES-001&gt; but was:&lt;ATHR-001&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: JSON path "code" expected:<QUES-001> but was:<ATHR-001>
	at com.upgrad.quora.api.controller.AnswerControllerTest.getAllAnswersToNonExistingQuestion(AnswerControllerTest.java:136)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="getAllAnswersToQuestionWithSignedOutUser" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.273">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.getAllAnswersToQuestionWithSignedOutUser(AnswerControllerTest.java:127)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="editAnswerWithNonExistingAccessToken" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.269">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.editAnswerWithNonExistingAccessToken(AnswerControllerTest.java:55)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="deleteAnswerWithSignedOutUser" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.43">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.deleteAnswerWithSignedOutUser(AnswerControllerTest.java:95)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="createAnswerForNonExistingQuestion" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.466">
    <failure message="JSON path &quot;code&quot; expected:&lt;QUES-001&gt; but was:&lt;ATHR-002&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: JSON path "code" expected:<QUES-001> but was:<ATHR-002>
	at com.upgrad.quora.api.controller.AnswerControllerTest.createAnswerForNonExistingQuestion(AnswerControllerTest.java:48)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?
Hibernate: 
    select
        userentity0_.id as id1_3_0_,
        userentity0_.aboutme as aboutme2_3_0_,
        userentity0_.contactnumber as contactn3_3_0_,
        userentity0_.country as country4_3_0_,
        userentity0_.dob as dob5_3_0_,
        userentity0_.email as email6_3_0_,
        userentity0_.firstname as firstnam7_3_0_,
        userentity0_.lastname as lastname8_3_0_,
        userentity0_.password as password9_3_0_,
        userentity0_.role as role10_3_0_,
        userentity0_.salt as salt11_3_0_,
        userentity0_.username as usernam12_3_0_,
        userentity0_.uuid as uuid13_3_0_ 
    from
        quora.users userentity0_ 
    where
        userentity0_.id=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to post an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="deleteAnswerWithoutOwnership" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.506">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.deleteAnswerWithoutOwnership(AnswerControllerTest.java:111)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to post an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="deleteNonExistingAnswer" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.605">
    <failure message="JSON path &quot;code&quot; expected:&lt;ANS-001&gt; but was:&lt;ATHR-001&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: JSON path "code" expected:<ANS-001> but was:<ATHR-001>
	at com.upgrad.quora.api.controller.AnswerControllerTest.deleteNonExistingAnswer(AnswerControllerTest.java:104)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to post an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="getAllAnswersToQuestionWithNonExistingAccessToken" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="1.04">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.getAllAnswersToQuestionWithNonExistingAccessToken(AnswerControllerTest.java:119)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to post an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="editAnswerWithoutOwnership" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.66">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.editAnswerWithoutOwnership(AnswerControllerTest.java:79)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?
Hibernate: 
    select
        userentity0_.id as id1_3_0_,
        userentity0_.aboutme as aboutme2_3_0_,
        userentity0_.contactnumber as contactn3_3_0_,
        userentity0_.country as country4_3_0_,
        userentity0_.dob as dob5_3_0_,
        userentity0_.email as email6_3_0_,
        userentity0_.firstname as firstnam7_3_0_,
        userentity0_.lastname as lastname8_3_0_,
        userentity0_.password as password9_3_0_,
        userentity0_.role as role10_3_0_,
        userentity0_.salt as salt11_3_0_,
        userentity0_.username as usernam12_3_0_,
        userentity0_.uuid as uuid13_3_0_ 
    from
        quora.users userentity0_ 
    where
        userentity0_.id=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to post an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to edit an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="editAnswerWithSignedOutUser" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="1.224">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.editAnswerWithSignedOutUser(AnswerControllerTest.java:63)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?
Hibernate: 
    select
        userentity0_.id as id1_3_0_,
        userentity0_.aboutme as aboutme2_3_0_,
        userentity0_.contactnumber as contactn3_3_0_,
        userentity0_.country as country4_3_0_,
        userentity0_.dob as dob5_3_0_,
        userentity0_.email as email6_3_0_,
        userentity0_.firstname as firstnam7_3_0_,
        userentity0_.lastname as lastname8_3_0_,
        userentity0_.password as password9_3_0_,
        userentity0_.role as role10_3_0_,
        userentity0_.salt as salt11_3_0_,
        userentity0_.username as usernam12_3_0_,
        userentity0_.uuid as uuid13_3_0_ 
    from
        quora.users userentity0_ 
    where
        userentity0_.id=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to post an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to edit an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to edit an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="createAnswerWithNonExistingAccessToken" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.741">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.createAnswerWithNonExistingAccessToken(AnswerControllerTest.java:31)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to post an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to edit an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to edit an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/database_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="createAnswerWithSignedOutUser" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.776">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.createAnswerWithSignedOutUser(AnswerControllerTest.java:39)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?
Hibernate: 
    select
        userentity0_.id as id1_3_0_,
        userentity0_.aboutme as aboutme2_3_0_,
        userentity0_.contactnumber as contactn3_3_0_,
        userentity0_.country as country4_3_0_,
        userentity0_.dob as dob5_3_0_,
        userentity0_.email as email6_3_0_,
        userentity0_.firstname as firstnam7_3_0_,
        userentity0_.lastname as lastname8_3_0_,
        userentity0_.password as password9_3_0_,
        userentity0_.role as role10_3_0_,
        userentity0_.salt as salt11_3_0_,
        userentity0_.username as usernam12_3_0_,
        userentity0_.uuid as uuid13_3_0_ 
    from
        quora.users userentity0_ 
    where
        userentity0_.id=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to post an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to edit an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to edit an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/database_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/database_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to post an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="editNonExistingAnswer" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.911">
    <failure message="JSON path &quot;code&quot; expected:&lt;ANS-001&gt; but was:&lt;ATHR-002&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: JSON path "code" expected:<ANS-001> but was:<ATHR-002>
	at com.upgrad.quora.api.controller.AnswerControllerTest.editNonExistingAnswer(AnswerControllerTest.java:72)
]]></failure>
    <system-out><![CDATA[Hibernate: 
    select
        userauthto0_.id as id1_2_,
        userauthto0_.access_token as access_t2_2_,
        userauthto0_.expires_at as expires_3_2_,
        userauthto0_.login_at as login_at4_2_,
        userauthto0_.logout_at as logout_a5_2_,
        userauthto0_.user_id as user_id7_2_,
        userauthto0_.uuid as uuid6_2_ 
    from
        quora.user_auth userauthto0_ 
    where
        userauthto0_.access_token=?
Hibernate: 
    select
        userentity0_.id as id1_3_0_,
        userentity0_.aboutme as aboutme2_3_0_,
        userentity0_.contactnumber as contactn3_3_0_,
        userentity0_.country as country4_3_0_,
        userentity0_.dob as dob5_3_0_,
        userentity0_.email as email6_3_0_,
        userentity0_.firstname as firstnam7_3_0_,
        userentity0_.lastname as lastname8_3_0_,
        userentity0_.password as password9_3_0_,
        userentity0_.role as role10_3_0_,
        userentity0_.salt as salt11_3_0_,
        userentity0_.username as usernam12_3_0_,
        userentity0_.uuid as uuid13_3_0_ 
    from
        quora.users userentity0_ 
    where
        userentity0_.id=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to post an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerDeleteResponse> com.upgrad.quora.api.controller.AnswerController.deleteAnswer(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to edit an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to edit an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/database_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-001","message":"User has not signed in.","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/database_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to post an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/non_existing_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerEditResponse> com.upgrad.quora.api.controller.AnswerController.editAnswerContent(com.upgrad.quora.api.model.AnswerEditRequest,java.lang.String,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.AnswerNotFoundException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.upgrad.quora.service.exception.AuthorizationFailedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {"code":"ATHR-002","message":"User is signed out.Sign in first to edit an answer","root_cause":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
</testsuite>